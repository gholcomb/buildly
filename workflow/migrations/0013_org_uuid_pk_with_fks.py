# Generated by Django 2.0.7 on 2019-05-31 11:59

from django.db import migrations, models
import uuid


organization_email_template_map = {}


def read_organization_email_template(apps, schema_editor):
    """Save relations to local variable."""
    email_template_model = apps.get_model('workflow', 'EmailTemplate')
    organization_model = apps.get_model('workflow', 'Organization')
    db_alias = schema_editor.connection.alias
    email_templates = email_template_model.objects.using(db_alias).all()
    for email_template in email_templates:
        organization = organization_model.objects.get(id=email_template.organization_id)
        organization_email_template_map[email_template.pk] = organization.uuid


def save_organization_email_template(apps, schema_editor):
    """Read relations from local variable and save."""
    email_template_model = apps.get_model('workflow', 'EmailTemplate')
    organization_model = apps.get_model('workflow', 'Organization')
    db_alias = schema_editor.connection.alias
    for email_template_pk, organization_uuid in organization_email_template_map.items():
        email_template = email_template_model.objects.using(db_alias).get(pk=email_template_pk)
        organization = organization_model.objects.using(db_alias).get(pk=organization_uuid)
        email_template.organization = organization
        email_template.save()


organization_workflowlevel1_map = {}


def read_organization_workflowlevel1(apps, schema_editor):
    """Save relations to local variable."""
    workflowlevel1_model = apps.get_model('workflow', 'WorkflowLevel1')
    organization_model = apps.get_model('workflow', 'Organization')
    db_alias = schema_editor.connection.alias
    workflowlevel1s = workflowlevel1_model.objects.using(db_alias).all()
    for workflowlevel1 in workflowlevel1s:
        if workflowlevel1.organization_id:
            organization = organization_model.objects.get(id=workflowlevel1.organization_id)
            organization_workflowlevel1_map[workflowlevel1.pk] = organization.uuid


def save_organization_workflowlevel1(apps, schema_editor):
    """Read relations from local variable and save."""
    workflowlevel1_model = apps.get_model('workflow', 'WorkflowLevel1')
    organization_model = apps.get_model('workflow', 'Organization')
    db_alias = schema_editor.connection.alias
    for workflowlevel1_pk, organization_uuid in organization_workflowlevel1_map.items():
        workflowlevel1 = workflowlevel1_model.objects.using(db_alias).get(pk=workflowlevel1_pk)
        organization = organization_model.objects.using(db_alias).get(pk=organization_uuid)
        workflowlevel1.organization = organization
        workflowlevel1.save()


organization_core_group_map = {}


def read_organization_core_group(apps, schema_editor):
    """Save relations to local variable."""
    core_group_model = apps.get_model('workflow', 'CoreGroup')
    organization_model = apps.get_model('workflow', 'Organization')
    db_alias = schema_editor.connection.alias
    core_groups = core_group_model.objects.using(db_alias).all()
    for core_group in core_groups:
        if core_group.organization_id:
            organization = organization_model.objects.get(id=core_group.organization_id)
            organization_core_group_map[core_group.pk] = organization.uuid


def save_organization_core_group(apps, schema_editor):
    """Read relations from local variable and save."""
    core_group_model = apps.get_model('workflow', 'CoreGroup')
    organization_model = apps.get_model('workflow', 'Organization')
    db_alias = schema_editor.connection.alias
    for core_group_pk, organization_uuid in organization_core_group_map.items():
        core_group = core_group_model.objects.using(db_alias).get(pk=core_group_pk)
        organization = organization_model.objects.using(db_alias).get(pk=organization_uuid)
        core_group.organization = organization
        core_group.save()


organization_core_user_map = {}


def read_organization_core_user(apps, schema_editor):
    """Save relations to local variable."""
    core_user_model = apps.get_model('workflow', 'CoreUser')
    organization_model = apps.get_model('workflow', 'Organization')
    db_alias = schema_editor.connection.alias
    core_users = core_user_model.objects.using(db_alias).all()
    for core_user in core_users:
        if core_user.organization_id:
            organization = organization_model.objects.get(id=core_user.organization_id)
            organization_core_user_map[core_user.pk] = organization.uuid


def save_organization_core_user(apps, schema_editor):
    """Read relations from local variable and save."""
    core_user_model = apps.get_model('workflow', 'CoreUser')
    organization_model = apps.get_model('workflow', 'Organization')
    db_alias = schema_editor.connection.alias
    for core_user_pk, organization_uuid in organization_core_user_map.items():
        core_user = core_user_model.objects.using(db_alias).get(pk=core_user_pk)
        organization = organization_model.objects.using(db_alias).get(pk=organization_uuid)
        core_user.organization = organization
        core_user.save()


industry_organization_map = {}


def read_organization_industry(apps, schema_editor):
    """Save relations to local variable."""
    industry_model = apps.get_model('workflow', 'Industry')
    db_alias = schema_editor.connection.alias
    industries = industry_model.objects.using(db_alias).all()
    for industry in industries:
        industry_organization_map[industry.pk] = list(industry.organization_set.values_list('uuid', flat=True))


def save_organization_industry(apps, schema_editor):
    """Read relations from local variable and save."""
    organization_model = apps.get_model('workflow', 'Organization')
    db_alias = schema_editor.connection.alias
    for industry_pk, organization_array in industry_organization_map.items():
        for organization_uuid in organization_array:
            organization_model.objects.using(db_alias).get(pk=organization_uuid).industries.add(industry_pk)


class Migration(migrations.Migration):

    dependencies = [
        ('workflow', '0012_auto_20190531_1149'),
    ]

    operations = [
        migrations.RunPython(read_organization_email_template,
                             migrations.RunPython.noop),
        migrations.RunPython(read_organization_workflowlevel1,
                             migrations.RunPython.noop),
        migrations.RunPython(read_organization_core_group,
                             migrations.RunPython.noop),
        migrations.RunPython(read_organization_core_user,
                             migrations.RunPython.noop),
        migrations.RunPython(read_organization_industry,
                             migrations.RunPython.noop),

        migrations.RemoveField(
            model_name='organization',
            name='id',
        ),
        migrations.AlterField(
            model_name='organization',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False,
                                   verbose_name='Organization UUID'),
        ),

        # FK EmailTemplate
        migrations.AlterUniqueTogether(  # Remove unique_together constraints for setting them newly
            name='emailtemplate',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='EmailTemplate',
            name='organization',
        ),
        # first with allowed blank fields
        migrations.AddField(
            model_name='EmailTemplate',
            name='organization',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=models.CASCADE, verbose_name='Organization',
                                    to='workflow.Organization'),
        ),
        # FK WorkflowLevel1
        migrations.RemoveField(
            model_name='WorkflowLevel1',
            name='organization',
        ),
        migrations.AddField(
            model_name='WorkflowLevel1',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=models.CASCADE,
                                    help_text='Related Org to associate with',
                                    to='workflow.Organization'),
        ),
        # FK CoreGroup
        migrations.RemoveField(
            model_name='CoreGroup',
            name='organization',
        ),
        migrations.AddField(
            model_name='CoreGroup',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=models.CASCADE,
                                    help_text='Related Org to associate with',
                                    to='workflow.Organization'),
        ),
        # FK CoreUser
        migrations.RemoveField(
            model_name='CoreUser',
            name='organization',
        ),
        migrations.AddField(
            model_name='CoreUser',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=models.CASCADE,
                                    help_text='Related Org to associate with',
                                    to='workflow.Organization'),
        ),
        # M2M Industry
        migrations.RemoveField(
            model_name='organization',
            name='industry',
        ),
        migrations.AddField(
            model_name='organization',
            name='industries',
            field=models.ManyToManyField(blank=True, help_text='Type of Industry the organization belongs to if any', related_name='organizations', to='workflow.Industry'),
        ),

        migrations.RunPython(save_organization_email_template,
                             migrations.RunPython.noop),
        migrations.RunPython(save_organization_workflowlevel1,
                             migrations.RunPython.noop),
        migrations.RunPython(save_organization_core_group,
                             migrations.RunPython.noop),
        migrations.RunPython(save_organization_core_user,
                             migrations.RunPython.noop),
        migrations.RunPython(save_organization_industry,
                             migrations.RunPython.noop),

        # remove blank again from EmailTemplate.organization
        migrations.AlterField(
            model_name='EmailTemplate',
            name='organization',
            field=models.ForeignKey(on_delete=models.CASCADE, verbose_name='Organization',
                                    to='workflow.Organization',
                                    help_text='Related Org to associate with'),
        ),

        # set unique_together on EmailTemplate again
        migrations.AlterUniqueTogether(
            name='emailtemplate',
            unique_together={('organization', 'type')},
        ),
    ]
